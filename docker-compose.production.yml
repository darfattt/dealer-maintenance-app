version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: dealer_postgres_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-dealer_dashboard}
      POSTGRES_USER: ${POSTGRES_USER:-dealer_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./backend-microservices/docker/init-db.sql:/docker-entrypoint-initdb.d/02-microservices-init.sql
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - dealer_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-dealer_user} -d ${POSTGRES_DB:-dealer_dashboard}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis for Celery
  redis:
    image: redis:7-alpine
    container_name: dealer_redis_prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - dealer_network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: dealer_backend_prod
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --workers 4
    volumes:
      - ./logs:/app/logs
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-dealer_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-dealer_dashboard}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SENTRY_DSN=${SENTRY_DSN}
      - ENVIRONMENT=production
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dealer_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Celery Worker
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: dealer_celery_worker_prod
    command: celery -A celery_app worker --loglevel=info --concurrency=4
    volumes:
      - ./logs:/app/logs
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-dealer_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-dealer_dashboard}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SENTRY_DSN=${SENTRY_DSN}
      - ENVIRONMENT=production
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dealer_network
    restart: unless-stopped

  # Celery Beat Scheduler
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: dealer_celery_beat_prod
    command: celery -A celery_app beat --loglevel=info
    volumes:
      - ./logs:/app/logs
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-dealer_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-dealer_dashboard}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SENTRY_DSN=${SENTRY_DSN}
      - ENVIRONMENT=production
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dealer_network
    restart: unless-stopped

  # Account Service
  account_service:
    build:
      context: ./backend-microservices
      dockerfile: ./docker/Dockerfile.account
      target: production
    container_name: dealer_account_service_prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-dealer_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-dealer_dashboard}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - SERVICE_NAME=account-service
      - SERVICE_VERSION=1.0.0
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENVIRONMENT=production
      - ADMIN_EMAIL=${ADMIN_EMAIL:-admin@dealer-dashboard.com}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - ADMIN_FULL_NAME=${ADMIN_FULL_NAME:-System Administrator}
    ports:
      - "${ACCOUNT_SERVICE_PORT:-8100}:8100"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - dealer_network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8100/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # API Gateway
  api_gateway:
    build:
      context: ./backend-microservices
      dockerfile: ./docker/Dockerfile.gateway
      target: production
    container_name: dealer_api_gateway_prod
    environment:
      - ACCOUNT_SERVICE_URL=http://account_service:8100
      - DEALER_DASHBOARD_SERVICE_URL=http://backend:8000
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=HS256
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-https://yourdomain.com}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENVIRONMENT=production
      - RATE_LIMIT_REQUESTS=${RATE_LIMIT_REQUESTS:-100}
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW:-60}
    ports:
      - "${API_GATEWAY_PORT:-8080}:8080"
    depends_on:
      account_service:
        condition: service_healthy
    networks:
      - dealer_network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Vue 3 Web Application
  web_app:
    build:
      context: ./web
      dockerfile: Dockerfile
      target: production
      args:
        NODE_ENV: production
        VITE_API_BASE_URL: /api
    container_name: dealer_web_app_prod
    environment:
      - NODE_ENV=production
      - BACKEND_URL=http://api_gateway:8080
    ports:
      - "${WEB_APP_PORT:-5000}:80"
    depends_on:
      api_gateway:
        condition: service_healthy
    networks:
      - dealer_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Dashboard Dealer Service
  dashboard_dealer_service:
    build:
      context: ./backend-microservices
      dockerfile: ./docker/Dockerfile.dashboard-dealer
      target: production
    container_name: dealer_dashboard_dealer_service_prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-dealer_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-dealer_dashboard}
      - SERVICE_NAME=dashboard-dealer-service
      - SERVICE_VERSION=1.0.0
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENVIRONMENT=production
    ports:
      - "${DASHBOARD_SERVICE_PORT:-8200}:8200"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - dealer_network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8200/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Analytics Dashboard
  analytics_dashboard:
    build:
      context: ./dashboard_analytics
      dockerfile: Dockerfile
      target: production
    container_name: dealer_analytics_dashboard_prod
    command: streamlit run dashboard_analytics.py --server.port 8501 --server.address 0.0.0.0 --server.headless true
    ports:
      - "${ANALYTICS_PORT:-8501}:8501"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-dealer_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-dealer_dashboard}
      - ENVIRONMENT=production
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - dealer_network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Admin Panel
  admin_panel:
    build:
      context: ./admin_panel
      dockerfile: Dockerfile
      target: production
    container_name: dealer_admin_panel_prod
    command: streamlit run admin_app.py --server.port 8502 --server.address 0.0.0.0 --server.headless true
    ports:
      - "${ADMIN_PANEL_PORT:-8502}:8502"
    environment:
      - BACKEND_URL=http://backend:8000
      - ENVIRONMENT=production
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - dealer_network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8502/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  dealer_network:
    driver: bridge
