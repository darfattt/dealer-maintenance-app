version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: dealer_postgres
    environment:
      POSTGRES_DB: dealer_dashboard
      POSTGRES_USER: dealer_user
      POSTGRES_PASSWORD: dealer_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./backend-microservices/docker/init-db.sql:/docker-entrypoint-initdb.d/02-microservices-init.sql
    ports:
      - "5432:5432"
    networks:
      - dealer_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dealer_user -d dealer_dashboard"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Celery
  redis:
    image: redis:7-alpine
    container_name: dealer_redis
    ports:
      - "6379:6379"
    networks:
      - dealer_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: dealer_backend
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://dealer_user:dealer_pass@postgres:5432/dealer_dashboard
      - REDIS_URL=redis://redis:6379/0
      - SENTRY_DSN=${SENTRY_DSN}
      - LOG_LEVEL=DEBUG
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dealer_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: dealer_celery_worker
    command: celery -A celery_app worker --loglevel=info
    volumes:
      - ./backend:/app
    environment:
      - DATABASE_URL=postgresql://dealer_user:dealer_pass@postgres:5432/dealer_dashboard
      - REDIS_URL=redis://redis:6379/0
      - SENTRY_DSN=${SENTRY_DSN}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dealer_network

  # Celery Beat Scheduler
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: dealer_celery_beat
    command: celery -A celery_app beat --loglevel=info
    volumes:
      - ./backend:/app
    environment:
      - DATABASE_URL=postgresql://dealer_user:dealer_pass@postgres:5432/dealer_dashboard
      - REDIS_URL=redis://redis:6379/0
      - SENTRY_DSN=${SENTRY_DSN}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dealer_network

  # Analytics Dashboard (Port 8501) - Direct DB Connection
  analytics_dashboard:
    build:
      context: ./dashboard_analytics
      dockerfile: Dockerfile
    container_name: dealer_analytics_dashboard
    command: streamlit run dashboard_analytics.py --server.port 8501 --server.address 0.0.0.0
    volumes:
      - ./dashboard_analytics:/app
    ports:
      - "8501:8501"
    environment:
      - DATABASE_URL=postgresql://dealer_user:dealer_pass@postgres:5432/dealer_dashboard
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - dealer_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Admin Panel (Port 8502) - API-based Management
  admin_panel:
    build:
      context: ./admin_panel
      dockerfile: Dockerfile
    container_name: dealer_admin_panel
    command: streamlit run admin_app.py --server.port 8502 --server.address 0.0.0.0
    volumes:
      - ./admin_panel:/app
    ports:
      - "8502:8502"
    environment:
      - BACKEND_URL=http://backend:8000
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - dealer_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8502/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: dealer_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - dealer_network

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: dealer_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - dealer_network

  # ============================================================================
  # MICROSERVICES ARCHITECTURE
  # ============================================================================

  # Account Service (Port 8100) - User Authentication & Authorization
  account_service:
    build:
      context: ./backend-microservices
      dockerfile: ./docker/Dockerfile.account
    container_name: dealer_account_service
    environment:
      - DATABASE_URL=postgresql://dealer_user:dealer_pass@postgres:5432/dealer_dashboard
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-super-secret-jwt-key-here-change-this-in-production}
      - SERVICE_NAME=account-service
      - SERVICE_VERSION=1.0.0
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
      - ADMIN_EMAIL=${ADMIN_EMAIL:-admin@dealer-dashboard.com}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-Admin123!}
      - ADMIN_FULL_NAME=${ADMIN_FULL_NAME:-System Administrator}
    ports:
      - "8100:8100"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - dealer_network
    volumes:
      - ./backend-microservices/services/account:/app
      - ./backend-microservices/utils:/app/utils
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8100/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
  

  # API Gateway (Port 8080) - Microservices Router & Load Balancer
  api_gateway:
    build:
      context: ./backend-microservices
      dockerfile: ./docker/Dockerfile.gateway
    container_name: dealer_api_gateway
    environment:
      - ACCOUNT_SERVICE_URL=http://account_service:8100
      - DEALER_DASHBOARD_SERVICE_URL=http://backend:8000
      - CUSTOMER_SERVICE_URL=http://customer_service:8300
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-super-secret-jwt-key-here-change-this-in-production}
      - JWT_ALGORITHM=HS256
      - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3001,http://localhost:5000,http://localhost:5173,http://localhost:5174,http://localhost:8501,http://localhost:8502
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
      - RATE_LIMIT_REQUESTS=100
      - RATE_LIMIT_WINDOW=60
    ports:
      - "8080:8080"
    depends_on:
      account_service:
        condition: service_healthy
    networks:
      - dealer_network
    volumes:
      - ./backend-microservices/api-gateway:/app
      - ./backend-microservices/utils:/app/utils
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Vue 3 Web Application (Port 5000) - PrimeVue with Authentication
  web_app:
    build:
      context: ./web
      dockerfile: Dockerfile
      target: production
      args:
        NODE_ENV: production
        VITE_API_BASE_URL: /api
    container_name: dealer_web_app
    environment:
      - NODE_ENV=production
      - BACKEND_HOST=api_gateway
      - BACKEND_PORT=8080
      - DOCKER_ENV=true
    ports:
      - "5000:80"
    depends_on:
      api_gateway:
        condition: service_healthy
    networks:
      - dealer_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Vue 3 Admin Web Application (Port 5001) - System Admin Portal for SYSTEM_ADMIN Role
  web_admin:
    build:
      context: ./web_admin
      dockerfile: Dockerfile
      target: production
      args:
        NODE_ENV: production
        VITE_API_BASE_URL: /api
    container_name: dealer_web_admin
    environment:
      - NODE_ENV=production
      - BACKEND_HOST=api_gateway
      - BACKEND_PORT=8080
      - DOCKER_ENV=true
    ports:
      - "5001:80"
    depends_on:
      api_gateway:
        condition: service_healthy
    networks:
      - dealer_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Dashboard Dealer Service (Port 8200) - Analytics Data Aggregation
  dashboard_dealer_service:
    build:
      context: ./backend-microservices
      dockerfile: ./docker/Dockerfile.dashboard-dealer
    container_name: dealer_dashboard_dealer_service
    environment:
      - DATABASE_URL=postgresql://dealer_user:dealer_pass@postgres:5432/dealer_dashboard
      - SERVICE_NAME=dashboard-dealer-service
      - SERVICE_VERSION=1.0.0
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
    ports:
      - "8200:8200"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - dealer_network
    volumes:
      - ./backend-microservices/services/dashboard-dealer:/app
      - ./backend-microservices/utils:/app/utils
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8200/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Customer Service (Port 8300) - Customer Phone Validation & WhatsApp Notifications
  customer_service:
    build:
      context: ./backend-microservices
      dockerfile: ./docker/Dockerfile.customer
    container_name: dealer_customer_service
    environment:
      - DATABASE_URL=postgresql://dealer_user:dealer_pass@postgres:5432/dealer_dashboard
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-super-secret-jwt-key-here-change-this-in-production}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=${JWT_ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      - JWT_REFRESH_TOKEN_EXPIRE_DAYS=${JWT_REFRESH_TOKEN_EXPIRE_DAYS:-7}
      - SERVICE_NAME=customer-service
      - SERVICE_VERSION=1.0.0
      - LOG_LEVEL=DEBUG
      - ENVIRONMENT=production
      - DB_SCHEMA=customer
      - DEALER_INTEGRATION_SCHEMA=dealer_integration
      - FONNTE_DEFAULT_API_URL=https://api.fonnte.com/send
      - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3001,http://localhost:5000,http://localhost:5173,http://localhost:5174,http://localhost:8501,http://localhost:8502,http://localhost:8080
      - APIFY_API_URL=${APIFY_API_URL:-https://api.apify.com/v2/actor-tasks/operational_tangent~google-maps-scraper-task/run-sync-get-dataset-items}
      - APIFY_API_TOKEN=${APIFY_API_TOKEN:-apify_api_oElpIXPORhp1x8OWzqJ280erzjbVwf2CXFx9}
      - APIFY_TIMEOUT=${APIFY_TIMEOUT:-120}
      - SENTIMENT_API_TOKEN=${SENTIMENT_API_TOKEN:-VQF6fIutCf5Md2s7MR5qiJmvAoGJe6jynNGWydXHxyI}
    ports:
      - "8300:8300"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - dealer_network
    volumes:
      - ./backend-microservices/services/customer:/app
      - ./backend-microservices/utils:/app/utils
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8300/api/v1/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  postgres_data:
  grafana_data:

networks:
  dealer_network:
    driver: bridge
