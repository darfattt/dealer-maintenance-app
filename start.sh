#!/bin/bash

echo ""
echo "========================================"
echo "  üöÄ Dealer Dashboard Full Stack Platform"
echo "========================================"
echo ""

# Colors for better output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Check if Docker is running
if ! docker version >/dev/null 2>&1; then
    echo -e "${RED}‚ùå Docker is not running. Please start Docker first.${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Docker is running${NC}"
echo ""

# Create logs directory
mkdir -p logs

echo -e "${BLUE}üî® Building and starting services...${NC}"
echo -e "   üì¶ Database & Cache (PostgreSQL, Redis)"
echo -e "   üîß Backend Services (FastAPI, Celery)"
echo -e "   üåê Microservices (Account, API Gateway, Dashboard)"
echo -e "   üé® Frontend (Vue.js Web App)"
echo -e "   üìä Analytics (Streamlit Dashboards)"
echo -e "   üìà Monitoring (Prometheus, Grafana)"
echo ""

# Start with main compose file (full architecture)
docker-compose up -d --build

echo ""
echo -e "${YELLOW}‚è≥ Waiting for services to start...${NC}"
sleep 30

echo ""
echo -e "${BLUE}üîç Checking service status...${NC}"

# Check PostgreSQL
if docker-compose exec -T postgres pg_isready -U dealer_user >/dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ PostgreSQL is ready${NC}"
else
    echo -e "${RED}‚ùå PostgreSQL is not ready${NC}"
fi

# Check Redis
if docker-compose exec -T redis redis-cli ping >/dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Redis is ready${NC}"
else
    echo -e "${RED}‚ùå Redis is not ready${NC}"
fi

# Check API Gateway
if curl -f http://localhost:8080/health >/dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ API Gateway is ready${NC}"
else
    echo -e "${RED}‚ùå API Gateway is not ready${NC}"
fi

# Check Web App
if curl -f http://localhost:5000 >/dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Web Application is ready${NC}"
else
    echo -e "${RED}‚ùå Web Application is not ready${NC}"
fi

echo ""
echo -e "${GREEN}üéâ Dealer Dashboard Full Stack Platform is ready!${NC}"
echo ""
echo -e "${CYAN}üåê MAIN APPLICATIONS:${NC}"
echo -e "   üé® Web Dashboard: ${BLUE}http://localhost:5000${NC}"
echo -e "   üìä Analytics Dashboard: ${BLUE}http://localhost:8501${NC}"
echo -e "   ‚öôÔ∏è Admin Panel: ${BLUE}http://localhost:8502${NC}"
echo ""
echo -e "${CYAN}üîß API SERVICES:${NC}"
echo -e "   üö™ API Gateway: ${BLUE}http://localhost:8080${NC}"
echo -e "   üîê Account Service: ${BLUE}http://localhost:8100${NC}"
echo -e "   üìà Dashboard Service: ${BLUE}http://localhost:8200${NC}"
echo -e "   üîß Backend API: ${BLUE}http://localhost:8000/docs${NC}"
echo ""
echo -e "${CYAN}üìà MONITORING:${NC}"
echo -e "   üìä Grafana: ${BLUE}http://localhost:3000${NC} (admin/admin)"
echo -e "   üìà Prometheus: ${BLUE}http://localhost:9090${NC}"
echo ""
echo -e "${CYAN}üìã QUICK START:${NC}"
echo -e "   1. üé® Main App: ${BLUE}http://localhost:5000${NC} (Vue.js Dashboard)"
echo -e "   2. üìä Analytics: ${BLUE}http://localhost:8501${NC} (Streamlit Charts)"
echo -e "   3. ‚öôÔ∏è Admin: ${BLUE}http://localhost:8502${NC} (Management Panel)"
echo -e "   4. üìà Monitoring: ${BLUE}http://localhost:3000${NC} (Grafana)"
echo ""
echo -e "${CYAN}üìã MANAGEMENT:${NC}"
echo -e "   üìã View logs: ${YELLOW}docker-compose logs -f [service_name]${NC}"
echo -e "   üõë Stop all: ${YELLOW}docker-compose down${NC}"
echo -e "   üîÑ Restart: ${YELLOW}docker-compose restart [service_name]${NC}"
echo ""

# Wait a bit more and then test
echo -e "${YELLOW}‚è≥ Final health checks...${NC}"
sleep 10

# Try to test the main application
if ! curl -f http://localhost:5000 >/dev/null 2>&1; then
    echo ""
    echo -e "${YELLOW}‚ö†Ô∏è  Web application may still be starting. You can access it manually.${NC}"
    echo -e "    Main App: ${BLUE}http://localhost:5000${NC}"
fi

echo ""
echo -e "${GREEN}üöÄ Full Stack Platform is ready!${NC}"
echo ""

# Function to open URL (works on most Linux distributions)
open_url() {
    if command -v xdg-open > /dev/null; then
        xdg-open "$1" >/dev/null 2>&1
    elif command -v gnome-open > /dev/null; then
        gnome-open "$1" >/dev/null 2>&1
    elif command -v kde-open > /dev/null; then
        kde-open "$1" >/dev/null 2>&1
    else
        echo -e "${YELLOW}Please open manually: ${BLUE}$1${NC}"
    fi
}

# Ask user if they want to open applications
echo -e "${CYAN}Would you like to open the applications in your browser? (y/n):${NC}"
read -r response

if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
    echo ""
    echo -e "${BLUE}üåê Opening Web Dashboard...${NC}"
    open_url "http://localhost:5000"
    sleep 2

    echo -e "${BLUE}üìä Opening Analytics Dashboard...${NC}"
    open_url "http://localhost:8501"
    sleep 2

    echo -e "${BLUE}‚öôÔ∏è Opening Admin Panel...${NC}"
    open_url "http://localhost:8502"
    sleep 2

    echo -e "${BLUE}üìà Opening Grafana Monitoring...${NC}"
    open_url "http://localhost:3000"

    echo ""
    echo -e "${GREEN}üéâ All applications are now open in your browser!${NC}"
fi

echo ""
echo -e "${PURPLE}üí° TIP: Use Ctrl+C to view logs in real-time:${NC}"
echo -e "    ${YELLOW}docker-compose logs -f web_app${NC}"
echo -e "    ${YELLOW}docker-compose logs -f api_gateway${NC}"
echo ""
echo -e "${GREEN}‚ú® Platform is running! Services will continue in the background.${NC}"
echo -e "${CYAN}Press Enter to exit this script...${NC}"
read -r
